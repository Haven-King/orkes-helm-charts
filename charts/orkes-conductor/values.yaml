replicaCount: 3

service:
  port: 5000
  appPort: 8080

image:
  repository: orkesio/orkes-conductor-server
  tag: 2.1.90
  pullPolicy: Always
  livenessPort: 5000

workerImage:
  repository: orkesio/orkes-conductor-workers
  tag: 2.1.90
  pullPolicy: Always

app:
  env: azure
  s3Region: "us-east-1"
  springProfilesActive: "security,logrotate,postgres"
  sweepBatchSize: "20"
  schedulerPollingInterval: "50"
  lockTimeToTry: "75"
  documentStoreUploaderThreadCount: "15"
  dbIndexerThreadCount: "5"
  dbIndexerPollingInterval: "1"
  swaggerUrl: "/"
  sweeperThreadCount: "20"
  schedulerPollBatchSize: "10"
  dbIndexerPollBatchSize: "30"
  sweepFrequencyMillis: "1"
  jvmSettings: "-Xms1500M -Xmx3000M"
  systemTaskMaxPollCount: "20"
  secretsType: "memory"
  workflowExecutionLockEnabled: "true"
  apiRateLimiterEnabled: "true"
  # Required if archiveStoreType = s3
  documentStoreS3BucketName: "s3-bucket-name"
  # Required if archiveStoreType = azureblob
  documentStoreAzureBlobContainerName: "azure-blob-container"
  # Required if archiveStoreType = azureblob
  documentStoreAzureBlobEndpoint: "azure-blob-endpoint"
  # postgres, s3, azureblob, gcp
  archiveStoreType: "postgres"
  resources:
    cpuLimit: "3"
    memoryLimit: "3Gi"
    cpuRequests: "2"
    memoryRequests: "2Gi"


workers:
  accessKeyId: "<YOUR SECRET KEY (RANDOM VALUE)>"
  accessKeySecret: "<YOUR SECRET (RANDOM VALUE)>"
  springProfilesActive: "logrotate"
  blockIps: "127.0.0.1"
  replicaCount: 2
  jvmSettings: "-Xms750M -Xmx2000M"
  resources:
    cpuLimit: "2"
    memoryLimit: "2Gi"
    cpuRequests: "1"
    memoryRequests: "1Gi"

redis:
  host: cache.amazonaws.com
  port: "6379"
  password: ""

postgres:
  username: "username"
  password: "password"
  url: "jdbc:postgresql://rds.amazonaws.com:5432/dbname"

appResources: {}

imageCredentials:
  registry: https://index.docker.io/v1/
  username: orkesdocker
  password: <YOUR SECRET>
  email: dockeracess@orkes.io

security:
  defaultUserEmail: "user@example.com"
  defaultUserName: "Name"
  enabled: "false"
  jwt:
    secret: "<YOUR SECRET KEY (For example use this: openssl rand -base64 172 | tr -d '\n')>"
# Create an account in Auth0, Create a SPA - get the id and secret and domain for the following info
  auth0:
    clientSecret: ""
    clientId: ""
    useIdToken: "false"
    domain: ""
  ssmPath: ""
